#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Sep 19 12:11:31 2017

@author: ivan

This file generate files readable from medeas from files
 generated by scrm.
"""

import sys

# According to scrm, and we follow the convention here, a locus is
# a physical region which  might contain various snp.
def transcode(infile: str, outfile: str, nb_individual: int,nb_site: int):
    with open(infile) as f:
        data = f.readlines()

    data = [d.strip() for d in data]
    data_snp = [d for d in data[1:] if d[0] != "p"]
    data_pos = [d for d in data[1:] if d[0] == "p"]
    nb_loci = len(data) // nb_individual
    loci = [None] * nb_loci
    position_loci = [None] * nb_loci
    print(f'number of loci: {nb_loci}')

    for i in range(nb_loci):
        loci[i] = data_snp[i * nb_individual:(i + 1) * nb_individual]
        position_loci[i] = data_pos[i].split(" ")[1:]
    id_snp = 0
    with open(outfile, 'w') as f:
        count_loci = 0
        for locus_index, locus in enumerate(loci):
            for snp in range(len(locus[0])):
                listsnp = [locus[individual][snp] for individual in range(nb_individual)]
                listint = list(map(int, listsnp))
                nb_polymorphism = sum(listint)
                if nb_polymorphism > 0:
                    count_loci = count_loci + 1
                    write_header(f,locus_index, id_snp, float(position_loci[locus_index][snp]))
                    for individual in range(nb_individual):
                        s = locus[individual][snp]
                        f.write(str(int(s) + 1))
                        if individual < nb_individual - 1:
                            f.write(' ')
                    f.write('\n')
                    id_snp +=1
    print(f'nb of polymorph loci: {count_loci}')

infile = sys.argv[1]
outfile = sys.argv[2]
nb_individual = int(sys.argv[3])

nb_site = int(sys.argv[4])
def write_header(file_stream, chromosome_id, snp_id, position):
    file_stream.write(str(chromosome_id+1) + " " + str(snp_id))
    position_cm = position*100
    position_bp = int(position*nb_site)
    file_stream.write(" " + str(position_cm) + " " +str(position_bp) + " ")
transcode(infile, outfile, nb_individual, nb_site)
